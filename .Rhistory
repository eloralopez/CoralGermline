ofu<-data[which(data$location=="Ofu"),]
bikinisize<-bikini$distcm
bikinifreq<-bikini$dividebysample
lmbikini<-lm(bikinifreq~bikinisize)
ofusize<-ofu$distcm
ofufreq<-ofu$dividebysample
lmofu<-lm(ofufreq~ofusize)
plot(ofusize, ofufreq, col="blue", ylim=c(0,max(bikinifreq)), xlim=c(0,max(ofusize)), ylab="Mutations per nucleotide per sample", xlab="Colony diameter", pch=16, cex=2)
#abline(lmofu, col="blue", lty="dashed")
points(bikinisize, bikinifreq, col="red", pch=16, cex=2)
#abline(lmbikini, col="red", lty="dashed")
legend("bottomleft",
legend = c("Bikini","Ofu"),
col=c("red", "blue"),
pch=c(16,16))
plot(ofusize, ofufreq, col="blue", ylim=c(0,max(bikinifreq)), xlim=c(0,max(ofusize)), ylab="Mutations per nucleotide per sample", xlab="Colony diameter", pch=16, cex=2)
abline(lmofu, col="blue", lty="dashed")
points(bikinisize, bikinifreq, col="red", pch=16, cex=2)
abline(lmbikini, col="red", lty="dashed")
legend("bottomleft",
legend = c("Bikini","Ofu"),
col=c("red", "blue"),
pch=c(16,16))
plot(ofusize, ofufreq, col="blue", ylim=c(0,max(bikinifreq)), xlim=c(0,max(ofusize)), ylab="Mutations per nucleotide per sample", xlab="Colony diameter", pch=16, cex=2)
#abline(lmofu, col="blue", lty="dashed")
points(bikinisize, bikinifreq, col="red", pch=16, cex=2)
#abline(lmbikini, col="red", lty="dashed")
legend("bottomleft",
legend = c("Bikini","Ofu"),
col=c("red", "blue"),
pch=c(16,16))
data<-read.delim("~/Documents/CurrentBiologySubmission/sizeandfreq.txt")
data<-read.delim("~/Documents/CurrentBiologySubmission/sizeandfreq.txt")
size<-data$sizecm2
GoH<-data$GoH
totlverified<-data$totalverified
LoH<-data$LoH
totalverified<-data$totalverified
totalbases<-data$totalbasesassayed
Nsamples<-data$Nsamples
freq<-totalverified/totalbases/Nsamples
freq
lohfreq<-LoH/totalbases/Nsamples
denovofreq<-GoH/totalbases/Nsamples
lohfreq
denovofreq
lmdenovo<-lm(denovofreq~size)
lmtotal<-lm(freq~size)
lmLoH<-lm(lohfreq~size)
modelSummary <- summary(lmdenovo)  # capture model summary as an object
modelCoeffs <- modelSummary$coefficients  # model coefficients
beta.estimate <- modelCoeffs["size", "Estimate"]  # get beta estimate for speed
std.error <- modelCoeffs["size", "Std. Error"]  # get std.error for speed
t_value <- beta.estimate/std.error  # calc t statistic
p_value <- 2*pt(-abs(t_value), df=nrow(cars)-ncol(cars))  # calc p Value
f_statistic <- linearMod$fstatistic[1]  # fstatistic
f <- summary(linearMod)$fstatistic  # parameters for model p-value calc
model_p <- pf(f[1], f[2], f[3], lower=FALSE)
par(mfrow=c(1,1))
plot(size,denovofreq, col="blue",ylim=c(min(denovofreq),max(freq)), pch=16, cex=2, ylab="Mutations per nucleotide per sample
", xlab="Colony surface area (cm2)")
abline(lmdenovo, col="blue",lty="dashed")
points(size,freq, pch=16, cex=2)
abline(lmtotal,lty="dashed")
points(size,lohfreq,col="red",pch=16, cex=2)
abline(lmLoH, col="red",lty="dashed")
data<-read.delim("~/Documents/CurrentBiologySubmission/sizeandfreq.txt")
data
enenames<-c("a","b","c","d","e")
ene<-data.frame(Size=enewetak, Names=enenames)
enewetak<-c(34, 64, 69, 81, 108)
ene<-data.frame(Size=enewetak, Names=enenames)
ofu<-c(206,22,64,105,55)
ofunames<-c("AH09","AH261","newcolony","AH130","AH131")
of<-data.frame(Size=ofu, Names=ofunames)
plot(of, xlim=c(0,210))
enewetak<-c(34, 64, 69, 81, 108)
enenames<-c("a","b","c","d","e")
ene<-data.frame(Size=enewetak, Names=enenames)
bikini<-c(70,133, 30, 52, 44.5, 83, 106)
bikininames<-c("Q","b41","A","L","b22","b18", "b45")
bik<-data.frame(Size=bikini, Names=bikininames)
plot(bik, xlim=c(0,210))
points(of, col="red")
point(ene, col="blue")
points(ene, col="blue")
pal<-data.frame(Size=palai, Names=palaunames)
palau<-c()
palaunames<-c("a","b","c","d","e")
pal<-data.frame(Size=palau, Names=palaunames)
palau<-c(420,139,55,57,67)
palaunames<-c("a","b","c","d","e")
pal<-data.frame(Size=palau, Names=palaunames)
plot(bik, xlim=c(0,210), pch=16)
bikini<-c(70,133, 30, 52, 44.5, 83, 106)
bikininames<-c("Q","b41","A","L","b22","b18", "b45")
bik<-data.frame(Size=bikini, Names=bikininames)
plot(bik, xlim=c(0,210), pch=16)
points(of, col="red",pch=16)
points(ene, col="blue",pch=16)
points(palau, col="green",pch=16)
points(pal, col="green",pch=16)
plot(bik, xlim=c(0,420), pch=16)
points(of, col="red",pch=16)
points(ene, col="blue",pch=16)
points(pal, col="green",pch=16)
version()
version
data<-read.delim("~/Documents/BikiniPipeline/sizebymutationfreq.txt")
bikini<-data[which(data$location=="Bikini"),]
ofu<-data[which(data$location=="Ofu"),]
bikinisize<-bikini$distcm
bikinifreq<-bikini$dividebysample
lmbikini<-lm(bikinifreq~bikinisize)
ofusize<-ofu$distcm
ofufreq<-ofu$dividebysample
lmofu<-lm(ofufreq~ofusize)
plot(ofusize, ofufreq, col="blue", ylim=c(0,max(bikinifreq)), xlim=c(0,max(ofusize)), ylab="Mutations per nucleotide per sample", xlab="Colony diameter", pch=16, cex=2)
#abline(lmofu, col="blue", lty="dashed")
points(bikinisize, bikinifreq, col="red", pch=16, cex=2)
#abline(lmbikini, col="red", lty="dashed")
legend("bottomleft",
legend = c("Bikini","Ofu"),
col=c("red", "blue"),
pch=c(16,16))
bikiniSNPs<-bikini$SNPS20191007
bikinimuts<-bikini$muts20191007
data<-read.delim("~/Documents/BikiniPipeline/sizebymutationfreq.txt")
bikini<-data[which(data$location=="Bikini"),]
ofu<-data[which(data$location=="Ofu"),]
bikinisize<-bikini$distcm
bikinimuts<-bikini$muts20191007
bikinifreqpersample<-bikinimuts/(bikini$ONLYnonvars201910 + bikini$SNPs201910)
bikinifreqpersample<-bikinimuts/(bikini$ONLYnonvars201910 + bikini$SNPs201910)/2
data<-read.delim("~/Documents/BikiniPipeline/sizebymutationfreq.txt")
bikini<-data[which(data$location=="Bikini"),]
ofu<-data[which(data$location=="Ofu"),]
bikinisize<-bikini$distcm
bikinimuts<-bikini$muts20191007
bikinifreqpersample<-bikinimuts/(bikini$ONLYnonvars201910 + bikini$SNPs201910)/2
lmbikini<-lm(bikinifreq~bikinisize)
ofusize<-ofu$distcm
ofumuts<-ofu$muts20191007
ofufreqpersample<-ofumuts/(ofu$ONLYnonvars201910 + ofu$SNPs201910)/2
data<-read.delim("~/Documents/BikiniPipeline/sizebymutationfreq.txt")
bikini<-data[which(data$location=="Bikini"),]
ofu<-data[which(data$location=="Ofu"),]
bikinisize<-bikini$distcm
bikinimuts<-bikini$muts20191007
bikinifreqpersample<-bikinimuts/(bikini$ONLYnonvars201910 + bikini$SNPs201910)/2
lmbikini<-lm(bikinifreq~bikinisize)
ofusize<-ofu$distcm
ofumuts<-ofu$muts20191007
ofufreqpersample<-ofumuts/(ofu$ONLYnonvars201910 + ofu$SNPs201910)/2
lmofu<-lm(ofufreq~ofusize)
plot(ofusize, ofufreq, col="blue", ylim=c(0,max(bikinifreq)), xlim=c(0,max(ofusize)), ylab="Mutations per nucleotide per sample", xlab="Colony diameter", pch=16, cex=2)
#abline(lmofu, col="blue", lty="dashed")
points(bikinisize, bikinifreq, col="red", pch=16, cex=2)
#abline(lmbikini, col="red", lty="dashed")
legend("bottomleft",
legend = c("Bikini","Ofu"),
col=c("red", "blue"),
pch=c(16,16))
plot(ofusize, ofufreqpersample, col="blue", ylim=c(0,max(bikinifreqpersample)), xlim=c(0,max(ofusize)), ylab="Mutations per nucleotide per sample", xlab="Colony diameter", pch=16, cex=2)
#abline(lmofu, col="blue", lty="dashed")
points(bikinisize, bikinifreqpersample, col="red", pch=16, cex=2)
#abline(lmbikini, col="red", lty="dashed")
legend("bottomleft",
legend = c("Bikini","Ofu"),
col=c("red", "blue"),
pch=c(16,16))
data<-read.delim("~/Documents/BikiniPipeline/sizebymutationfreq.txt")
bikini<-data[which(data$location=="Bikini"),]
ofu<-data[which(data$location=="Ofu"),]
bikinisize<-bikini$distcm
bikinimuts<-bikini$muts20191007
bikinifreqpersample<-bikinimuts/(bikini$ONLYnonvars201910 + bikini$SNPs201910)/2
lmbikini<-lm(bikinifreq~bikinisize)
ofusize<-ofu$distcm
ofumuts<-ofu$muts20191007
ofufreqpersample<-ofumuts/(ofu$ONLYnonvars201910 + ofu$SNPs201910)/2
lmofu<-lm(ofufreq~ofusize)
lmofu
summary(lmofu)
summary(lmbikini)
plot(ofusize, ofufreqpersample, col="blue", ylim=c(0,max(bikinifreqpersample)), xlim=c(0,max(ofusize)), ylab="Mutations per nucleotide per sample", xlab="Colony diameter", pch=16, cex=2)
#abline(lmofu, col="blue", lty="dashed")
points(bikinisize, bikinifreqpersample, col="red", pch=16, cex=2)
#abline(lmbikini, col="red", lty="dashed")
legend("bottomleft",
legend = c("Bikini","Ofu"),
col=c("red", "blue"),
pch=c(16,16))
snps<-read.delim(file.choose('allsamples_chr1.vcf_genotyped.vcf_filtered_nomissing.vcf_output_geno.vcf.012'), header=F)
names<-read.delim(file.choose('allsamples_chr1.vcf_genotyped.vcf_filtered_nomissing.vcf_output_geno.vcf.012.indv'),header=F)
rownames(snps)<-names[,1]
row.names(snps)
snps<-as.matrix(snps[,-1])
pc.out<-prcomp(snps)
plot(jitter(pc.out$x[,1]),jitter(pc.out$x[,2]),cex=0, xlab="PC1", ylab="PC2",xlim=c(-1.5,-1.4),ylim=c(-2.6,-2.53))
text(pc.out$x[,1], pc.out$x[,2],label=rownames(snps), cex=0.5)
plot(hclust(dist(snps)))
snps<-read.delim('allsamples_AHEAHPCAPCAS_chr1_20191106.vcf_genotyped.vcf_filtered_nomissing.vcf_output_geno.vcf.012'), header=F)
snps<-read.delim('allsamples_AHEAHPCAPCAS_chr1_20191106.vcf_genotyped.vcf_filtered_nomissing.vcf_output_geno.vcf.012', header=F)
snps<-read.delim('~/Documents/BikiniPipeline/allsamples_AHEAHPCAPCAS_chr1_20191106.vcf_genotyped.vcf_filtered_nomissing.vcf_output_geno.vcf.012', header=F)
names<-read.delim('~/Documents/BikiniPipeline/allsamples_AHEAHPCAPCAS_chr1_20191106.vcf_genotyped.vcf_filtered_nomissing.vcf_output_geno.vcf.012.indv', header=F)
rownames(snps)<-names[,1]
row.names(snps)
snps<-as.matrix(snps[,-1])
pc.out<-prcomp(snps)
plot(jitter(pc.out$x[,1]),jitter(pc.out$x[,2]),cex=0, xlab="PC1", ylab="PC2",xlim=c(-1.5,-1.4),ylim=c(-2.6,-2.53))
text(pc.out$x[,1], pc.out$x[,2],label=rownames(snps), cex=0.5)
plot(hclust(dist(snps)))
plot(jitter(pc.out$x[,1]),jitter(pc.out$x[,2]),cex=0, xlab="PC1", ylab="PC2",xlim=c(-1.5,-1.4),ylim=c(-2.6,-2.53))
text(pc.out$x[,1], pc.out$x[,2],label=rownames(snps), cex=0.5)
plot(jitter(pc.out$x[,1]),jitter(pc.out$x[,2]),cex=0, xlab="PC1", ylab="PC2")#,xlim=c(-1.5,-1.4),ylim=c(-2.6,-2.53))
text(pc.out$x[,1], pc.out$x[,2],label=rownames(snps), cex=0.5)
data<-read.delim("~/Documents/BikiniPipeline/sizebymutationfreq.txt")
bikini<-data[which(data$location=="Bikini"),]
ofu<-data[which(data$location=="Ofu"),]
bikinisize<-bikini$distcm
bikinimuts<-bikini$muts20191007
bikinifreqpersample<-bikinimuts/(bikini$ONLYnonvars201910 + bikini$SNPs201910)/2
lmbikini<-lm(bikinifreq~bikinisize)
ofusize<-ofu$distcm
ofumuts<-ofu$muts20191007
ofufreqpersample<-ofumuts/(ofu$ONLYnonvars201910 + ofu$SNPs201910)/2
lmofu<-lm(ofufreq~ofusize)
plot(ofusize, ofufreqpersample, col="blue", ylim=c(0,max(bikinifreqpersample)), xlim=c(0,max(ofusize)), ylab="Mutations per nucleotide per sample", xlab="Colony diameter", pch=16, cex=2)
#abline(lmofu, col="blue", lty="dashed")
points(bikinisize, bikinifreqpersample, col="red", pch=16, cex=2)
text(label=data$colony)
#abline(lmbikini, col="red", lty="dashed")
legend("bottomleft",
legend = c("Bikini","Ofu"),
col=c("red", "blue"),
pch=c(16,16))
data
ofufreqpersample
plot(jitter(pc.out$x[,1]),jitter(pc.out$x[,2]),cex=0, xlab="PC1", ylab="PC2")#,xlim=c(-1.5,-1.4),ylim=c(-2.6,-2.53))
text(pc.out$x[,1], pc.out$x[,2],label=rownames(snps), cex=0.5)
plot(jitter(pc.out$x[,1]),jitter(pc.out$x[,2]),cex=0, xlab="PC1", ylab="PC2",xlim=c(-4,-2),ylim=c(-2,2))
text(pc.out$x[,1], pc.out$x[,2],label=rownames(snps), cex=0.5)
plot(jitter(pc.out$x[,1]),jitter(pc.out$x[,2]),cex=0, xlab="PC1", ylab="PC2",xlim=c(-4,-3),ylim=c(-1,1))
text(pc.out$x[,1], pc.out$x[,2],label=rownames(snps), cex=0.5)
plot(hclust(dist(snps)))
files<-list.files(path="~/Documents/BikiniPipeline", pattern="CAcolony60_ii_output20191113.txt", full.names=T, recursive=FALSE)
metadata= NULL
for (i in 1:length(files)) {
file =files[i]
data<-read.delim(file)
data<-data.frame(data)
base<-basename(file)
colony<-strsplit(base, "\\_")[[1]][2]
len<-nrow(data)
colonyrep<-rep(colony, len)
withcolony<-data.frame(data, colonyrep)
metadata <- rbind(metadata, withcolony)
}
genoanddepth<-(metadata$genotype)
split<-str_split_fixed(genoanddepth, ",", 4)
library("reshape2")
library(ggplot2)
library(stringr)
library(sciplot)
library(sinaplot)
library(ggforce)
library(gridExtra)
sessionInfo()
split<-str_split_fixed(genoanddepth, ",", 4)
split
metadata
genoanddepth<-(metadata$genotype)
plot(jitter(pc.out$x[,1]),jitter(pc.out$x[,2]),cex=0, xlab="PC1", ylab="PC2")#,xlim=c(-4,-3),ylim=c(-1,1))
text(pc.out$x[,1], pc.out$x[,2],label=rownames(snps), cex=0.5)
snps<-read.delim('~/Documents/BikiniPipeline/fulldataset_cohort_chr1.vcf_genotyped.vcf_output_geno.vcf.012', header=F)
c((138/(138+804)), (139/(139+546)), (147/(147+1159)), (760/(760+1363)), (699/(699+793)), (484/(484+838)), (375/(375+861)), (328/(328+899)), (804/(138+804)), (546/(139+546)), (1159/(147+1159)), (1363/(760+1363)), (793/(699+793)), (838/(484+838)), (861/(375+861)), (899/(328+899))
runs<-c((138/(138+804)), (139/(139+546)), (147/(147+1159)), (760/(760+1363)), (699/(699+793)), (484/(484+838)), (375/(375+861)), (328/(328+899)), (804/(138+804)), (546/(139+546)), (1159/(147+1159)), (1363/(760+1363)), (793/(699+793)), (838/(484+838)), (861/(375+861)), (899/(328+899))
runs<-c((138/(138+804)), (139/(139+546)), (147/(147+1159)), (760/(760+1363)), (699/(699+793)), (484/(484+838)), (375/(375+861)), (328/(328+899)), (804/(138+804)), (546/(139+546)), (1159/(147+1159)), (1363/(760+1363)), (793/(699+793)), (838/(484+838)), (861/(375+861)), (899/(328+899)))
group<-c("CA60", "CA60", "CA60",  "CA65", "CA56", "CA56", "CA56")
runs<-c((138/(138+804)), (139/(139+546)), (147/(147+1159)), (760/(760+1363)), (699/(699+793)), (484/(484+838)), (375/(375+861)), (328/(328+899)))#, (804/(138+804)), (546/(139+546)), (1159/(147+1159)), (1363/(760+1363)), (793/(699+793)), (838/(484+838)), (861/(375+861)), (899/(328+899)))
group<-c("CA60", "CA60", "CA60",  "CA65", "CA56", "CA56", "CA56")
withinRunStats = function(x) c(sum = sum(x), mean = mean(x), var = var(x), n = length(x))
tapply(runs, group, withinRunStats)
group<-c("CA60", "CA60", "CA60",  "CA65", "CA65", "CA56", "CA56", "CA56")
withinRunStats = function(x) c(sum = sum(x), mean = mean(x), var = var(x), n = length(x))
tapply(runs, group, withinRunStats)
data = data.frame(y = runs, group = factor(group))
data
fit = lm(runs ~ group, data)
fit
anova(fit)
oneway<-aov(runs!group)
oneway<-aov(runs~group)
summary(oneway)
plot(oneway)
degreesOfFreedom = anova(fit)[, "Df"]
names(degreesOfFreedom) = c("treatment", "error")
> degreesOfFreedom
degreesOfFreedom = anova(fit)[, "Df"]
names(degreesOfFreedom) = c("treatment", "error")
degreesOfFreedom
anova(fit)["Residuals", "Mean Sq"]
anova(fit)["group", "Mean Sq"]
boxplot(runs~group)
boxplot(runs~group, xlab="Colony Name", ylab="Proportion of Somatic Mutations Inherited by Sperm")
boxplot(runs~group, xlab="Colony Name", ylab="Proportion of Somatic Mutations Inherited by Sperm",ylim=c(0,1))
boxplot(runs~group, xlab="Colony Name", ylab="Proportion of Somatic Mutations Inherited by Sperm")
stripchart(runs ~ group,
vertical = TRUE, method = "jitter",
pch = 21, col = "maroon", bg = "bisque",
add = TRUE)
boxplot(runs~group, xlab="Colony Name", ylab="Proportion of Somatic Mutations Inherited by Sperm")
stripchart(runs ~ group,
vertical = TRUE,
pch = 21, col = "red", bg = "bisque",
add = TRUE)
stripchart(runs ~ group,
vertical = TRUE,
pch = 22, col = "red", bg = "bisque",
add = TRUE)
boxplot(runs~group, xlab="Colony Name", ylab="Proportion of Somatic Mutations Inherited by Sperm")
stripchart(runs ~ group,
vertical = TRUE,
pch = 22, col = "red", bg = "bisque",
add = TRUE)
boxplot(runs~group, xlab="Colony Name", ylab="Proportion of Somatic Mutations Inherited by Sperm")
stripchart(runs ~ group,
vertical = TRUE,
pch = 21, col = "red", bg = "bisque",
add = TRUE)
boxplot(runs~group, xlab="Colony Name", ylab="Proportion of Somatic Mutations Inherited by Sperm",col="red,black,white")
boxplot(runs~group, xlab="Colony Name", ylab="Proportion of Somatic Mutations Inherited by Sperm",col=c("red,black,white"))
boxplot(runs~group, xlab="Colony Name", ylab="Proportion of Somatic Mutations Inherited by Sperm",col=c("red","black","white"))
boxplot(runs~group, xlab="Colony Name", ylab="Proportion of Somatic Mutations Inherited by Sperm",col=c("blue","gray","green"))
boxplot(runs~group, xlab="Colony Name", ylab="Proportion of Somatic Mutations Inherited by Sperm", las=1, col=c("blue","gray","green"))
boxplot(runs~group, xlab="Colony Name", ylab="Proportion of Somatic Mutations Inherited by Sperm", las=1, col=c("blue","gray","light green"))
boxplot(runs~group, xlab="Colony Name", ylab="Proportion of Somatic Mutations Inherited by Sperm", las=1, col=c("light blue","gray","light green"))
boxplot(runs~group, xlab="Colony Name", ylab="Proportion of Somatic Mutations Inherited by Sperm", las=1, col=c("light blue","light gray","light green"))
###AH75###
setwd("~/Documents/GitHub/CoralGermline/")
library("reshape2")
library(ggplot2)
library(stringr)
library(sciplot)
library(sinaplot)
library(ggforce)
library(gridExtra)
library(dplyr)
sessionInfo()
##to look at all data combined together:
files<-list.files(path="~/Documents/GitHub/Germline", pattern="*muts_relabeled*", full.names=T, recursive=FALSE) #path to all the files you want to include in the analysis
metadata= NULL
for (i in 1:length(files)) {
file =files[i]
data<-read.delim(file) #read in each file in "files"
data<-data.frame(data) # transform the data from each file into a dataframe
base<-basename(file)
colony<-strsplit(base, "\\_")[[1]][2]
len<-nrow(data)
colonyrep<-rep(colony, len)
withcolony<-data.frame(data, colonyrep) #combines the colonyname column with each dataframe
metadata <- rbind(metadata, withcolony) #adds each dataframe to the overall metatadata, so that the information from all of the files are now in "metadata"
}
genoanddepth<-(metadata$genotype) #names the column
split<-str_split_fixed(genoanddepth, ",", 4) #split the genotype, depths, and GQ score into their own separate strings
genotypes<-split[,1] #defines the genotype as the first string in "split"
position<-metadata$chrom.pos #names the column
positionsplit<-str_split_fixed(position, "[.]", 2) #split the chromosome number and the position on the chromosome into their own separate strings
chr<-positionsplit[,1] #defines the chromosome as the first string in "positionsplit"
pos<-positionsplit[,2] #defines the position as the second string in "positionsplit"
#totaldepth<-as.numeric(split[,2])
refdepth<-as.numeric(split[,2])
altdepth<-as.numeric(split[,3])
what<-metadata$WhattoWhat
allelesplit<-str_split_fixed(what, "to", 2)
normalallele<-allelesplit[,1]
mutantallele<-allelesplit[,2]
totaldepth<-refdepth+altdepth
GQscore<-as.numeric(split[,4])
mutant_alleledepth = rep("A", nrow(metadata))
for (i in 1:nrow(metadata)){
if (mutantallele[i] == metadata$alt[i]) {
mutant_alleledepth[i] = altdepth[i]
print(mutant_alleledepth[i])
} else {
mutant_alleledepth[i] = refdepth[i]
print(mutant_alleledepth[i])
}  #print("ALT", mutant_alleledepth, refdepth)
}
print(mutant_alleledepth[1:10])
print(refdepth[1:10])
print(altdepth[1:10])
metadatadf<-data.frame("chrom.pos" = metadata$chrom.pos, "chrom"=chr, "pos"=pos,	"sample"= metadata$sample, "ref" = metadata$ref, "alt" = 	metadata$alt, "normal_allele"= normalallele, "mutant_allele" = mutantallele, "mutant_allele_depth" = as.numeric(mutant_alleledepth), "genotype"= genotypes, "totaldepth"=totaldepth, 	"refdepth"=refdepth, "altdepth"=altdepth, "GQscore"= GQscore,	"GoH_or_LoH"=metadata$DeNovo_LoH, "Ti/Tv"=metadata$TiTv, 	"WhattoWhat" = metadata$WhattoWhat,"TrueorFalse" =metadata$TrueorFalse)#  ColonyName"=metadata$colonyrep)
DepthMeansdf<-aggregate(totaldepth~chrom.pos, metadatadf, 			FUN=mean)
DepthMinsdf<-aggregate(totaldepth~chrom.pos, metadatadf, 			FUN=min)
GQaverage<-aggregate(GQscore~chrom.pos, metadatadf, FUN=mean)
GQmin<-aggregate(GQscore~chrom.pos, metadatadf, FUN=min)
metadatadf.00<-merge(metadatadf, DepthMeansdf[, c("chrom.pos", 	"totaldepth")], by="chrom.pos")
metadatadf.0<-merge(metadatadf.00, GQaverage[,c("chrom.pos","GQscore")], by="chrom.pos")
metadatadf.0<-merge(metadatadf.0, DepthMinsdf[,c("chrom.pos","totaldepth")], by="chrom.pos")
metadatadf.0<-merge(metadatadf.0, GQmin[,c("chrom.pos","GQscore")], by="chrom.pos")
DeNovos<-subset(metadatadf.0, GoH_or_LoH=="DeNovo")
sample3<-subset(DeNovos, sample== "sample3")
trueDenovos_sample3<-subset(sample3, refdepth =="0" | altdepth=="0")
sample4<-subset(DeNovos, sample== "sample4")
trueDenovos_sample4<-subset(sample4, refdepth =="0" | altdepth=="0")
sample5<-subset(DeNovos, sample== "sample5")
trueDenovos_sample5<-subset(sample5, refdepth =="0" | altdepth=="0")
sample6<-subset(DeNovos, sample== "sample6")
trueDenovos_sample6<-subset(sample6, refdepth =="0" | altdepth=="0")
sample7<-subset(DeNovos, sample== "sample7")
trueDenovos_sample7<-subset(sample7, refdepth =="0" | altdepth=="0")
sample8<-subset(DeNovos, sample== "sample8")
trueDenovos_sample8<-subset(sample8, refdepth =="0" | altdepth=="0")
truedenovos3_8<-rbind(trueDenovos_sample3, trueDenovos_sample4, trueDenovos_sample5, trueDenovos_sample6, trueDenovos_sample7, trueDenovos_sample8)
LoH<-subset(metadatadf.0, GoH_or_LoH =="LoH")#
trueLoHp<-subset(LoH,refdepth =="0" | altdepth=="0")
trueLoHp1<-subset(trueLoHp, sample=="mutparent1")
trueLoHp2<-subset(trueLoHp, sample=="mutparent2")
metadatadf<-rbind( DeNovos, trueLoHp1, trueLoHp2)
uniquemetadatadf<- metadatadf[match(unique(metadatadf$chrom.pos), 					metadatadf$chrom.pos),]
files
##to look at all data combined together:
files<-list.files(path="~/Documents/GitHub/Germline", pattern="CAcolony60_CAP22muts_relabeled60.txt", full.names=T, recursive=FALSE) #path to all the files you want to include in the analysis
metadata= NULL
for (i in 1:length(files)) {
file =files[i]
data<-read.delim(file) #read in each file in "files"
data<-data.frame(data) # transform the data from each file into a dataframe
base<-basename(file)
colony<-strsplit(base, "\\_")[[1]][2]
len<-nrow(data)
colonyrep<-rep(colony, len)
withcolony<-data.frame(data, colonyrep) #combines the colonyname column with each dataframe
metadata <- rbind(metadata, withcolony) #adds each dataframe to the overall metatadata, so that the information from all of the files are now in "metadata"
}
##to look at all data combined together:
files<-list.files(path="~/Documents/GitHub/CoralGermline", pattern="CAcolony60_CAP22muts_relabeled60.txt", full.names=T, recursive=FALSE) #path to all the files you want to include in the analysis
metadata= NULL
for (i in 1:length(files)) {
file =files[i]
data<-read.delim(file) #read in each file in "files"
data<-data.frame(data) # transform the data from each file into a dataframe
base<-basename(file)
colony<-strsplit(base, "\\_")[[1]][2]
len<-nrow(data)
colonyrep<-rep(colony, len)
withcolony<-data.frame(data, colonyrep) #combines the colonyname column with each dataframe
metadata <- rbind(metadata, withcolony) #adds each dataframe to the overall metatadata, so that the information from all of the files are now in "metadata"
}
genoanddepth<-(metadata$genotype) #names the column
split<-str_split_fixed(genoanddepth, ",", 4) #split the genotype, depths, and GQ score into their own separate strings
genotypes<-split[,1] #defines the genotype as the first string in "split"
position<-metadata$chrom.pos #names the column
positionsplit<-str_split_fixed(position, "[.]", 2) #split the chromosome number and the position on the chromosome into their own separate strings
chr<-positionsplit[,1] #defines the chromosome as the first string in "positionsplit"
pos<-positionsplit[,2] #defines the position as the second string in "positionsplit"
#totaldepth<-as.numeric(split[,2])
refdepth<-as.numeric(split[,2])
altdepth<-as.numeric(split[,3])
what<-metadata$WhattoWhat
allelesplit<-str_split_fixed(what, "to", 2)
normalallele<-allelesplit[,1]
mutantallele<-allelesplit[,2]
totaldepth<-refdepth+altdepth
GQscore<-as.numeric(split[,4])
mutant_alleledepth = rep("A", nrow(metadata))
for (i in 1:nrow(metadata)){
if (mutantallele[i] == metadata$alt[i]) {
mutant_alleledepth[i] = altdepth[i]
print(mutant_alleledepth[i])
} else {
mutant_alleledepth[i] = refdepth[i]
print(mutant_alleledepth[i])
}  #print("ALT", mutant_alleledepth, refdepth)
}
print(mutant_alleledepth[1:10])
print(refdepth[1:10])
print(altdepth[1:10])
metadatadf<-data.frame("chrom.pos" = metadata$chrom.pos, "chrom"=chr, "pos"=pos,	"sample"= metadata$sample, "ref" = metadata$ref, "alt" = 	metadata$alt, "normal_allele"= normalallele, "mutant_allele" = mutantallele, "mutant_allele_depth" = as.numeric(mutant_alleledepth), "genotype"= genotypes, "totaldepth"=totaldepth, 	"refdepth"=refdepth, "altdepth"=altdepth, "GQscore"= GQscore,	"GoH_or_LoH"=metadata$DeNovo_LoH, "Ti/Tv"=metadata$TiTv, 	"WhattoWhat" = metadata$WhattoWhat,"TrueorFalse" =metadata$TrueorFalse)#  ColonyName"=metadata$colonyrep)
DepthMeansdf<-aggregate(totaldepth~chrom.pos, metadatadf, 			FUN=mean)
DepthMinsdf<-aggregate(totaldepth~chrom.pos, metadatadf, 			FUN=min)
GQaverage<-aggregate(GQscore~chrom.pos, metadatadf, FUN=mean)
GQmin<-aggregate(GQscore~chrom.pos, metadatadf, FUN=min)
metadatadf.00<-merge(metadatadf, DepthMeansdf[, c("chrom.pos", 	"totaldepth")], by="chrom.pos")
metadatadf.0<-merge(metadatadf.00, GQaverage[,c("chrom.pos","GQscore")], by="chrom.pos")
metadatadf.0<-merge(metadatadf.0, DepthMinsdf[,c("chrom.pos","totaldepth")], by="chrom.pos")
metadatadf.0<-merge(metadatadf.0, GQmin[,c("chrom.pos","GQscore")], by="chrom.pos")
DeNovos<-subset(metadatadf.0, GoH_or_LoH=="DeNovo")
sample3<-subset(DeNovos, sample== "sample3")
trueDenovos_sample3<-subset(sample3, refdepth =="0" | altdepth=="0")
sample4<-subset(DeNovos, sample== "sample4")
trueDenovos_sample4<-subset(sample4, refdepth =="0" | altdepth=="0")
sample5<-subset(DeNovos, sample== "sample5")
trueDenovos_sample5<-subset(sample5, refdepth =="0" | altdepth=="0")
sample6<-subset(DeNovos, sample== "sample6")
trueDenovos_sample6<-subset(sample6, refdepth =="0" | altdepth=="0")
sample7<-subset(DeNovos, sample== "sample7")
trueDenovos_sample7<-subset(sample7, refdepth =="0" | altdepth=="0")
sample8<-subset(DeNovos, sample== "sample8")
trueDenovos_sample8<-subset(sample8, refdepth =="0" | altdepth=="0")
truedenovos3_8<-rbind(trueDenovos_sample3, trueDenovos_sample4, trueDenovos_sample5, trueDenovos_sample6, trueDenovos_sample7, trueDenovos_sample8)
LoH<-subset(metadatadf.0, GoH_or_LoH =="LoH")#
trueLoHp<-subset(LoH,refdepth =="0" | altdepth=="0")
trueLoHp1<-subset(trueLoHp, sample=="mutparent1")
trueLoHp2<-subset(trueLoHp, sample=="mutparent2")
metadatadf<-rbind( DeNovos, trueLoHp1, trueLoHp2)
uniquemetadatadf<- metadatadf[match(unique(metadatadf$chrom.pos), 					metadatadf$chrom.pos),]
x<-c(0,2,3,"a","d")
y<-c(3, 2, 0, "a", "d")
write.table(uniquemetadatadf, file="CAcolony60CAP22uniquemuts.txt",sep="\t",quote=FALSE, row.name=FALSE)
